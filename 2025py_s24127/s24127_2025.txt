# =============================================================================
# PROGRAM FASTA Format Random DNA Sequence Generator
# CONTEXT Bioinformatics assignment using LLM-generated code, modified and annotated
# PURPOSE Generate a random DNA sequence with inserted name (non-biological),
# compute nucleotide stats, format as FASTA, and save to a file.
# AUTHOR Insert Your Name
# =============================================================================

import random
import sys
import os

# === CONSTANTS ===
VALID_NUCLEOTIDES = ['A', 'C', 'G', 'T']
LINE_WRAP_LENGTH = 60  # Standard for FASTA formatting


def sanitize_filename(name)
    Remove or replace invalid characters in filenames.
    # MODIFIED original input not sanitized
    invalid_chars = ['', '', '', '', '', '', '', '', '']
    for ch in invalid_chars
        name = name.replace(ch, '_')
    return name.strip().replace( , _)


def get_user_input()
    Collect and validate user inputs.
    while True
        try
            length = int(input(Enter the sequence length ))
            if length = 0
                print(Length must be a positive integer.)
                continue
            break
        except ValueError
            print(Invalid input. Please enter a number.)
    
    seq_id = sanitize_filename(input(Enter the sequence ID ))
    
    while True
        description = input(Provide a description of the sequence ).strip()
        if description
            break
        else
            print(Description cannot be empty.)
    
    user_name = input(Enter your name ).strip()
    return length, seq_id, description, user_name


def generate_dna_sequence(length, user_name)
    Generate a random DNA sequence with the name embedded randomly.
    core_sequence = ''.join(random.choices(VALID_NUCLEOTIDES, k=length))
    insert_index = random.randint(0, len(core_sequence))
    
    # ORIGINAL
    # sequence = ''.join(random.choices(ACGT, k=length))
    # sequence_with_name = sequence[insert_position] + name + sequence[insert_position]
    
    # MODIFIED (encapsulated logic in function, and returns both core and full seq)
    final_sequence = core_sequence[insert_index] + user_name + core_sequence[insert_index]
    return core_sequence, final_sequence


def write_fasta_file(filename, seq_id, description, sequence)
    Write the sequence to a FASTA-formatted file.
    with open(filename, w) as f
        f.write(f{seq_id} {description}n)
        for i in range(0, len(sequence), LINE_WRAP_LENGTH)
            f.write(sequence[ii + LINE_WRAP_LENGTH] + n)


def calculate_nucleotide_statistics(sequence)
    Calculate the percentage of each base and CGAT ratio.
    total = len(sequence)
    count = {nuc sequence.count(nuc) for nuc in VALID_NUCLEOTIDES}
    
    # MODIFIED used dictionary for cleaner expansion, rather than 4 variables
    percentages = {k (v  total)  100 for k, v in count.items()}
    cg_content = (count['C'] + count['G'])  total  100
    return percentages, cg_content


def display_statistics(percentages, cg_content)
    Print formatted statistics.
    print(Sequence statistics)
    for nuc in VALID_NUCLEOTIDES
        print(f{nuc} {percentages[nuc].1f}%)
    print(f%CG {cg_content.1f})


def main()
    Main driver function for the DNA generator program.
    length, seq_id, description, user_name = get_user_input()
    core_seq, full_seq = generate_dna_sequence(length, user_name)

    file_name = f{seq_id}.fasta
    write_fasta_file(file_name, seq_id, description, full_seq)

    percentages, cg_ratio = calculate_nucleotide_statistics(core_seq)

    print(fnThe sequence was saved to the file {file_name})
    display_statistics(percentages, cg_ratio)


# Run the program
if __name__ == __main__
    main()

# =============================================================================
# CHANGES FROM LLM VERSION
# 1. Encapsulated logic into reusable functions for readability and testability.
# 2. Added sanitize_filename() to prevent invalid file names on OS.
# 3. Used a dictionary-based approach for nucleotide counting and stats.
# 4. Wrapped main logic inside a main() guard for better practice in Python scripting.
# 5. Added clearer FASTA formatting using a constant (LINE_WRAP_LENGTH).
# 6. Clear documentation and consistent f-string usage for output.
# =============================================================================
